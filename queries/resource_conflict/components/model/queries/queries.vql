package resource_conflict.components.model.queries

import epackage "http://www.example.org/model"


pattern differentTaskLength(t:Task, a:Assignment) {
	Task.assignment(t,a);
	Task.Estimate(t,taskEstimatedTime);
	Assignment.From(a,from);
	Assignment.To(a,to);
	difference == eval(to-from);
	difference != taskEstimatedTime;
}

pattern intersectingAllocation(a1:Assignment, a2:Assignment, p:Person) {
	Assignment.person(a1,p);
	Assignment.person(a2,p);
	a1 != a2;
	Assignment.From(a1,f1);
	Assignment.To(a1,t1);
	Assignment.From(a2,f2);
	check(f1 < f2);
	check(f2 < t1);
}

pattern qualifications(p:Person, q:Qualification) {
    Person.qualifications(p,q);
}

pattern unqualifiedAllocation(t:Task, p:Person) {
	Task.qualificationsRequired(t,q);
	Task.assignment.person(t,p);
	neg find qualifications(p,q);
}

private pattern taskAssigned(t) {
	Task.assignment(t,_);
}

pattern canAssign(t:Task, p:Person) {
	neg find taskAssigned(t);
	neg find unqualifiedAllocation(t,p);
	AllocationProblem.persons(a,p);
	AllocationProblem.components.tasks(a,t);
}
// Error constraints
@Constraint(severity = "error", message = "Assignment can not be from negative time", key = {a})
pattern patternAssignmentFromNegative(a : Assignment) {
    Assignment.From(a,from);
    check(from < 0);
}

@Constraint(severity = "error", message = "Assignment negative length", key = {a})
pattern patternAssignmentNegativeLength(a : Assignment) {
    Assignment.From(a,from);
    Assignment.To(a,to);
    check(to < from);
}

// Warning constraints
@Constraint(severity = "warning", message = "Person with no name", key = {p})
pattern personWithNoName(p : Person) {
    Person.Name(p,"");
}

@Constraint(severity = "warning", message = "Qualification with no name", key = {q})
pattern qualificationWithNoName(q : Qualification) {
    Qualification.Name(q,"");
}

@Constraint(severity = "warning", message = "Component with no name", key = {c})
pattern componentWithNoName(c : Component) {
    Component.Name(c,"");
}

@Constraint(severity = "warning", message = "Task with no name", key = {t})
pattern taskWithNoName(t : Task) {
    Task.Name(t,"");
}